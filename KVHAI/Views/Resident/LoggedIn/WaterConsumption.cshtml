@using System.Security.Claims;
@{
    Layout = "/Views/Shared/ResidentLayout/_ResidentLayout.cshtml";
    ViewBag.Title = "Water Reading";

    var role = User.FindFirst(ClaimTypes.Role)?.Value;
    var registerAddressURL = "";

    if (role == "1")//owner
    {
        registerAddressURL = "/kvhai/resident/register-addres";
    }
    else //renter
    {
        registerAddressURL = "/kvhai/resident/register/address";
    }
}
@section head{
    <style>
        /* Content Container */
        .content-container {
            max-width: 100%;
            padding: 2rem;
            background-color: #f7f7f7;
        }

        /* General Card Styling */
        .chart-container, .consumption-card, .past-readings {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .chart-placeholder {
            height: 300px;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            font-size: 1.1rem;
            border-radius: 8px;
        }

        /* Table Styling */
        .table {
            border-collapse: separate;
            border-spacing: 0 10px;
        }

            .table thead th {
                border-bottom: 2px solid #ddd;
                font-weight: bold;
            }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: #f9f9f9;
        }

        /* Typography and Layout */
        h5, h6 {
            color: #495057;
        }

        h5 {
            font-size: 1.25rem;
            font-weight: 600;
        }

        h6 {
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .fw-bold {
            font-weight: 700;
        }

        /* Consistent Padding */
        .p-4 {
            padding: 1.5rem;
        }

        .mb-3, .mb-4 {
            margin-bottom: 1.5rem;
        }

        /* Spacing for different elements */
        .shadow-sm {
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .rounded {
            border-radius: 8px !important;
        }

        .form-select {
            height: 42px;
            border-radius: 6px;
        }

        .highlight {
            background-color: #e9ecef;
            /*transform: scale(1.1);*/
            transform: translateY(-2px);
            padding: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            ; /* Soft shadow for depth */
        }
    </style>
}

@section sidebar{
    <a href="/kvhai/resident/home" class="nav_sidebar mb-3 ">
        <div class="row">
            <div class="col-4  d-flex justify-content-center">
                <i class="fa-solid fa-house nav_icon"></i>
            </div>
            <div class="col  d-flex justify-content-start">
                Home
            </div>

        </div>
    </a>
    <a href="/kvhai/resident/announcement" class="nav_sidebar  mb-3 ">
        <div class="row">
            <div class="col-4  d-flex justify-content-center">
                <i class="fa-solid fa-bullhorn"></i>
            </div>
            <div class="col  d-flex justify-content-start">
                Announcement
            </div>

        </div>
    </a>
    <a href="/kvhai/resident/register-address" class="nav_sidebar mb-3">
        <div class="row">
            <div class="col-4  d-flex justify-content-center">
                <i class="fa-solid fa-location-dot nav_icon"></i>
            </div>
            <div class="col  d-flex justify-content-start">
                Register
            </div>

        </div>
    </a>
    <a href="/kvhai/resident/my-address" class="nav_sidebar mb-3">
        <div class="row">
            <div class="col-4  d-flex justify-content-center">
                <i class="fa-solid fa-location-crosshairs nav_icon"></i>
            </div>
            <div class="col  d-flex justify-content-start">
                My Address
            </div>

        </div>
    </a>
    <a href="/kvhai/resident/water-consumption" class="nav_sidebar active mb-3">
        <div class="row">
            <div class="col-4  d-flex justify-content-center">
                <i class="fa-solid fa-gauge nav_icon"></i>
            </div>
            <div class="col  d-flex justify-content-start">
                Consumption
            </div>
        </div>
    </a>
    <a href="/kvhai/resident/billing" class="nav_sidebar mb-3">
        <div class="row">
            <div class="col-4  d-flex justify-content-center">
                <i class="fa-solid fa-money-bills nav_icon"></i>
            </div>
            <div class="col  d-flex justify-content-start">
                Billing
            </div>
        </div>
    </a>

}

@section mobilenav{
    <a href="/kvhai/resident/home" class="nav_sidebar mb-3 ps-3">
        <div class="d-flex">
                <i class="fa-solid fa-house nav_icon"></i>
            <span class="ms-3">
                Home
            </span>

        </div>
    </a>
    <a href="/kvhai/resident/announcement" class="nav_sidebar  mb-3 ps-3">
        <div class="d-flex">
            <i class="fa-solid fa-bullhorn"></i>
            <span class="ms-3">
                Announcement
            </span>

        </div>
    </a>
    <a href="/kvhai/resident/register-address" class="nav_sidebar mb-3 ps-3">
        <div class=" d-flex">
            <i class="fa-solid fa-location-dot mobile_nav_icon"></i>
            <span class="ms-3">
                Register Address
            </span>

        </div>
    </a>
    <a href="/kvhai/resident/my-address" class="nav_sidebar mb-3 ps-3">
        <div class=" d-flex">
            <i class="fa-solid fa-location-crosshairs mobile_nav_icon"></i>
            <span class="ms-3">
                My Address
            </span>
        </div>
    </a>
    <a href="/kvhai/resident/water-consumption" class="nav_sidebar active mb-3 ps-3">
        <div class="d-flex">
            <i class="fa-solid fa-gauge mobile_nav_icon"></i>
            <span class="ms-3">
                Consumption
            </span>
        </div>
    </a>
    <a href="/kvhai/resident/billing" class="nav_sidebar mb-3  ps-3">
        <div class="d-flex">
            <i class="fa-solid fa-money-bills mobile_nav_icon"></i>
            <span class="ms-3">
                Billing
            </span>
        </div>
    </a>
}

<div class="pop_container" style="display:none;">
    <div class="pop_content">
        <div class="pop_header">
            <h3>Bills</h3>
            <button class="pop_close">x</button>
        </div>
        <hr />
        <div class="pop_body"></div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <div id="waterReadingView">
            <div class="row mb-4">
                <div class="col-12 col-md-4 mb-3 mb-md-0">
                    <select class="form-select shadow-sm" aria-label="Default select example" id="select_address">
                        @{
                            if (Model.AddressList.Count > 0)
                            {
                                for (int i = 0; i < Model.AddressList.Count; i++)
                                {
                                    var addressID = Model.AddressList[i].Address_ID;
                                    var block = "Blk " + Model.AddressList[i].Block;
                                    var lot = "Lot " + Model.AddressList[i].Lot;
                                    var st = Model.AddressList[i].Street_Name + " St.";
                                    var address = string.Join(" ", block, lot, st);

                                    if (i == 0)
                                    {
                                        <option value="@addressID" selected>@address</option>
                                    }
                                    else
                                    {
                                        <option value="@addressID">@address</option>
                                    }

                                }
                            }
                            else
                            {
                                    <option value="" selected></option>
                            }

                        }
                    </select>
                </div>
                <div class="col-12 col-md-8 d-flex justify-content-md-end">
                    <div class="p-2 border shadow-sm rounded d-flex" id="water_consumption">
                        @if (Model.AllWaterReadingByResident.Count > 0)
                        {
                            var date = Model.AllWaterReadingByResident[0].Date;
                            var consumption = Model.AllWaterReadingByResident[0].Consumption;
                            <span class="fw-bold text-muted me-3">WATER READING AS OF @date:</span>
                            <span class="fw-bold">@consumption</span>

                        }
                        else
                        {
                            <span>N/A</span>
                        }
                    </div>

                </div>
            </div>
            <div id="tableData">
                <!-- Add the table and water history -->
                <!--WATER RATE-->
                <div class="row mb-4 g-3">
                    <!-- Chart section -->
                    <div class="col-12 col-lg-8">
                        <div class="chart-container p-4 bg-white shadow-sm rounded border">
                            <div class="row mb-3">
                                <div class="col-9">
                                    <h5 class="text-muted mb-3">Water Consumption Overview</h5>
                                </div>
                                <div class="col-3">
                                    <select class="form-control" id="select_year">
                                        @{
                                            if (Model.YearList != null && Model.YearList.Count>0)
                                            {
                                                for (int i = 0; i < Model.YearList.Count; i++)
                                                {
                                                    if (i == 0)
                                                    {
                                                        <option value="@Model.YearList[i]" selected>@Model.YearList[i]</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@Model.YearList[i]">@Model.YearList[i]</option>
                                                    }
                                                }
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="chart-placeholder">
                                <canvas id="myChart"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- Monthly Consumption Section -->
                    <div class="col-12 col-lg-4">
                        <div class="consumption-card bg-white border p-2 rounded shadow-sm">
                            <div class="mb-3 mt-3">
                                <h5 class="text-muted">Insights:</h5>
                                <div class=" bg-white" id="insightContainer"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!--WATER HISTORY-->
                <div class="row">
                    <div class="col-12">
                        <div class="past-readings bg-white p-4 rounded shadow-sm border">
                            <h5 class="mb-3 fw-bold">Past Reading Water Consumption</h5>
                            <div class="table-responsive">
                                <table class="table table-striped align-middle">
                                    <thead>
                                        <tr>
                                            <th scope="col">
                                                <span class="fw-bold text-muted">Date</span>
                                            </th>
                                            <th scope="col">
                                                <span class="fw-bold text-muted">Water Reading</span>
                                            </th>
                                            <th scope="col">
                                                <span class="fw-bold text-muted">Cubic Consumption</span>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model.AllWaterReadingByResident.Count > 0)
                                        {
                                            if (Model.AllWaterReadingByResident.Count > Model.CubicMeter.Count)
                                            {
                                                var listCubic = new List<double> { 0 };
                                                listCubic.AddRange(Model.CubicMeter);

                                                for (int i = 0; i < Model.AllWaterReadingByResident.Count; i++)
                                                {
                                                    var value = 0.0;
                                                    if (i < listCubic.Count)
                                                    {
                                                        value = listCubic[i];

                                                    }
                                                    <tr>
                                                        <td>@Model.AllWaterReadingByResident[i].Date</td>
                                                        <td>@Model.AllWaterReadingByResident[i].Consumption</td>
                                                        <td>@value</td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                for (int i = 0; i < Model.AllWaterReadingByResident.Count; i++)
                                                {
                                                    var value = 0.0;
                                                    if (i < Model.CubicMeter.Count)
                                                    {
                                                        value = Model.CubicMeter[i];

                                                    }
                                                    <tr>
                                                        <td>@Model.AllWaterReadingByResident[i].Date</td>
                                                        <td>@Model.AllWaterReadingByResident[i].Consumption</td>
                                                        <td>@value</td>
                                                    </tr>
                                                }
                                            }




                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="2" class="text-center p-5">No Existing Data!</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section scripts{
    <script src="~/lib/chartjs/chart.umd.min.js"></script>

    <script>
        $(document).ready(function () {
            var myChart = null; // Declare the global variable

            GetGraphData();

            const waterConsumptionConnection = setupSignalRConnection("/resident/water-consumption", "Water Consumption Hub");

            waterConsumptionConnection.on("ReceivedNotification", function (message) {
                toastr.success(message);
                alert("dito guana");
            })
            waterConsumptionConnection.on("ReceivedReadingNotification", function (message, resident_id) {
                var addr_id = $('#select_address').val();
                var _year = $('#select_year').val();
                alert(`Address: ${addr_id}, Year: ${_year}`);
                GetDataAndGraph(addr_id, _year);
            })


            $(document).on('change', '#select_address', function () {
                var addr_id = $('#select_address').val();
                var _year = $('#select_year').val();

                GetDataAndGraph(addr_id, _year);
            });

            function GetDataAndGraph(address_id, _year) {
                $.ajax({
                    type: "POST",
                    url: "/WaterConsumption/WaterReadingByAddress",
                    data: { addressID: address_id, year: _year },
                    success: function (response) {
                        // Update HTML with the new data
                        console.log(response);
                        var html = response.html;

                        var htmlResult = $(html).find('#tableData').html()
                        var waterText = $(html).find('#water_consumption').html();

                        $('#water_consumption').html(waterText);
                        $('#tableData').html(htmlResult);

                        //// Process the graph data
                        var chartData = response.graphData;
                        console.log(chartData.yearlyData);

                        //var labels = chartData.map(item => item.dateMonth);
                        //var data = chartData.map(item => parseInt(item.cubicConsumption));

                        //console.log(`labels: ${labels}`);
                        //console.log(`data: ${data}`);
                        ////// Update the chart with new data
                        //SetChartJs(labels, data);

                        var yearlyData = chartData.yearlyData;
                        var yearsData = {};
                        var insights = [];

                        Object.keys(yearlyData).forEach(function (year) {
                            var yearData = yearlyData[year];
                            yearsData[year] = {
                                actualData: yearData.actualData || [],
                                forecastData: yearData.movingAverage || [],
                                insights: yearData.insights || [],
                                percentChange: yearData.percentChange || []
                            };

                            //yearDropdown.append(new Option(year, year));
                            insights = insights.concat(yearData.insights || []);
                        });
                        console.log(yearsData);
                        console.log(insights);

                        chartDataSets(yearsData);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetGraphData() {
                var addr_id = $('#select_address').val();
                var _year = $('#select_year').val();

                console.log(`address id: ${addr_id} AND year: ${_year}`)
                $.ajax({
                    url: '@Url.Action("GraphWaterReading", "WaterConsumption")',
                    type: 'GET',
                    data: { addressID: addr_id, year: _year},
                    success: function (data) {
                        console.log(data);
                        var months = [];
                        var consumptions = [];

                        var yearlyData = data.yearlyData || {};
                        var yearsData = {};
                        var insights = []; // To store all insights

                        Object.keys(yearlyData).forEach(function (year) {
                            var yearData = yearlyData[year];
                            yearsData[year] = {
                                actualData: yearData.actualData || [],
                                forecastData: yearData.movingAverage || [],
                                insights: yearData.insights || [],
                                percentChange: yearData.percentChange || []
                            };

                            //yearDropdown.append(new Option(year, year));
                            insights = insights.concat(yearData.insights || []);
                        });

                        chartDataSets(yearsData);
                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function chartDataSets(yearlyData) {
                var selectedYear = $('#select_year').val();
                var yearData = yearlyData[selectedYear]; // Get data for the selected year

                if (!yearData) {
                    toastr.error(`No data available for year: ${selectedYear}`);
                    return;
                }

                var actualData = {
                    label: `Cubic Consumption ${selectedYear}`,
                    data: yearData.actualData,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.1,
                    borderColor: '#052771'
                };

                var forecastData = {
                    label: `Forecast Data ${selectedYear}`,
                    data: yearData.forecastData,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.1,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderDash: [5, 5]
                };

                // Set the chart with the actual and forecast data
                SetChartJs(actualData, forecastData, yearData.insights);
                DisplayInsights(yearData.insights); // Call DisplayInsights with collected insights

            }

            function SetChartJs(actualData, forecastData, insights) {
                const ctx = $('#myChart');

                // Destroy the old chart if it exists
                if (myChart !== null) {
                    myChart.destroy(); // Properly destroy the previous chart
                }

                // Create a new chart
                myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [actualData, forecastData] // Pass both datasets (actual and forecast)
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Cubic Meter Consumption'
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Months'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    font: {
                                        size: 14,
                                        weight: 'bold'
                                    }
                                }
                            },
                            tooltip: {
                                enabled: true,
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleFont: { size: 14, weight: 'bold' },
                                bodyFont: { size: 12 },
                                bodyColor: '#ffffff',
                                titleColor: '#ffffff',
                                borderColor: '#ffffff',
                                borderWidth: 1,
                                callbacks: {
                                    // Tooltip content callback
                                    afterLabel: function (tooltipItem) {
                                        var index = tooltipItem.dataIndex;
                                        var label = tooltipItem.label;
                                        console.log(tooltipItem);
                                        console.log(label);

                                        var insight;
                                        if (tooltipItem.datasetIndex === 1) {
                                            insight = 'Expected cubic consumption for this month.';
                                        }
                                        //var insight = insights[index] || 'Expected cubic consumption for this month.';
                                        highlightInsight(index); // Highlight the corresponding insight
                                        return insight;
                                    }
                                }
                            }
                        },
                        // Event listeners for when the tooltip is hidden (e.g., when the user moves away)
                        onHover: function (event, chartElement) {
                            if (chartElement.length === 0) {
                                resetInsightHighlight(); // Reset highlight when no chart element is hovered
                            }
                        }
                    }
                });
            }

            // Function to highlight the relevant insight in the external container
            function highlightInsight(index) {
                var insightContainer = $('#insightContainer');

                // Remove existing highlights
                var highlightedItems = insightContainer.find('.highlight');
                if (highlightedItems.length) {
                    highlightedItems.removeClass('highlight');
                }

                // Find the div with the corresponding data-index attribute
                var insightItem = insightContainer.find(`[data-index="${index}"]`);

                // Add the highlight class to the matching element
                insightItem.addClass('highlight');

                console.log(insightItem); // For debugging, shows the element being highlighted
            }

            // Function to reset the highlighted insight
            function resetInsightHighlight() {
                var insightContainer = $('#insightContainer');

                var highlightedItems = insightContainer.find('.highlight');
                if (highlightedItems.length) {
                    highlightedItems.removeClass('highlight');
                }
            }

            function DisplayInsights(insights) {
                console.log(insights);
                var insightContainer = $('#insightContainer');
                insightContainer.empty(); // Clear any previous insights

                if (insights.length > 0) {
                    var insightText = `<div class="insights">`;
                    insights.forEach(function (insight,index) {
                        if (insight !== null) {
                            insightText += `<div class="border p-2 mb-3 rounded" data-index="${index}"> ${insight}</div>`;
                        }


                    });
                    insightText += "</div>";
                    insightContainer.html(insightText); // Add the insights to the container
                } else {
                    insightContainer.html("<p>No insights available for this data.</p>");
                }
            }
        });

    </script>
}
