@{
    //Layout = "";
    ViewBag.Title = "Admin Dashboard";
}

@section head{
    <link href="/lib/evo-calendar/css/evo-calendar.css" rel="stylesheet" />
    <link href="/lib/evo-calendar/css/evo-calendar.midnight-blue.min.css" rel="stylesheet" />
    <link href="/lib/evo-calendar/css/evo-calendar.royal-navy.min.css" rel="stylesheet" />
    <link href="/css/simple-calendar.css" rel="stylesheet" />
    <link href="/css/Admins/dashboard.css" rel="stylesheet" />
    <style>
        /*ROW 1*/
        .metric-card {
            transition: transform 0.2s, box-shadow 0.2s;
            overflow: hidden;
            height: 100%;
        }

            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);
            }

        .metric-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-size: 1.5rem;
        }

        .card-value {
            font-size: 2.5rem;
            font-weight: bold;
            line-height: 1.2;
        }

        /*END ROW 1*/
        .backgroundgray {
            background-color: #f1f5f9;
        }

        .chartjs-tooltip {
            background-color: rgba(0, 0, 0, 0.8) !important;
            color: #ffffff !important;
            border-radius: 5px !important;
            padding: 10px !important;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5) !important;
            font-size: 12px !important;
        }

        .graph_insight {
            display: none;
            font-family: Arial, sans-serif;
            color: #444;
            font-size: 0.9rem;
            background-color: #fafafa; /* Light grey background */
            padding: 20px;
            border-radius: 5px; /* Rounded corners */
        }

        /* Dropdown Button Styling */
        #show_ingsight {
            cursor: pointer;
        }

            #show_ingsight:hover {
                background-color: #f1f5f9; /* Darker blue on hover */
            }

        .highlight {
            background-color: red;
            border: 2px solid #007bff; /* Adding a border */
            padding: 12px;
            transform: scale(1.05);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
            transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease, border 0.3s ease;
        }

            .highlight td {
                border: 2px solid #007bff; /* Border for each cell in the highlighted row */
            }

        .chart-container {
            max-width: 1600px; /* or larger */
            margin-bottom: 30px; /* More space between chart and insights */
        }

        #insightContainer {
            padding: 15px;
        }

        .table.insight_table td:hover {
            background-color: #f9f9f9; /* Light hover background */
            cursor: pointer;
        }

        /* Insight table styling */
        .table.insight_table th,
        .table.insight_table td {
            text-align: center;
            vertical-align: middle;
            padding: 10px; /* Add more padding */
            font-size: 14px; /* Adjust font size for better readability */
        }

        .table.insight_table th {
            background-color: #f0f0f0; /* Light background for headers */
            color: #333; /* Darker text for better contrast */
            border: 1px solid #ddd; /* Subtle border for better separation */
        }

        .table.insight_table td {
            background-color: #ffffff; /* White background for table cells */
            border: 1px solid #ddd; /* Subtle border for better definition */
        }

        .p-2.rounded.mb-3 {
            margin-bottom: 10px; /* Add space between table rows */
            border-radius: 5px; /* Softer rounded corners for table cells */
        }
    </style>
}

@section Scripts{
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/signalrSetupConnection.js"></script>
    <script src="~/lib/chartjs/chart.umd.min.js"></script>
    <script src="~/lib/evo-calendar/js/evo-calendar.min.js"></script>
    <script src="~/js/jquery.simple-calendar.min.js"></script>

    <!--EVO CALENDAR SCRIPTS-->
    <script>
        myEvents = [
            {
                id: "blk41-143",
                name: "Reading",
                description: "lorem ipsum",
                date: "07/06/2024",
                type: "holiday",
                everyYear: true
            },
            // more events here
        ],
            $('#calendar').evoCalendar({
                'todayHighlight': true,
                'eventDisplayDefault': false,
                theme: 'Orange Coral',
                sidebarDisplayDefault: false,
                format: 'mm/dd/yyyy',
                badge: "Important",
                titleFormat: 'MM yyyy',
                eventHeaderFormat: 'MM d, yyyy',
                calendarEvents: myEvents
            });

        $(document).ready(function (e) {
            $('#calendar').evoCalendar({
                settingName: "task"
            })

            $('.day').on('click', () => {
                //const a = document.getElementsByClassName('');
                //a.classList.toggle('rotate');
                $(".evo-calendar").toggleClass("event-hide");
            });

            $(document).on('click', (e) => {
                if (!$(e.target).closest('.calendar-events').length && !$(e.target).closest('.evo-calendar').length) {
                    $(".evo-calendar").addClass("event-hide");
                }
            });
        })
    </script>

    <!--CHART JS SCRIPTS-->
    <script>
        $(document).ready(function () {
            //SIGNAL R
            const dashboardConnection = setupSignalRConnection("/staff/dashboard", "Accounts Hub");

            dashboardConnection.on("ReceivedDataDashboard", function (message) {
                toastr.success("New data added");

                GetGraphData();
                GetNewReading();
                GetNewPayment();
                GetRequestToday();
                GetRemit();
            });

            var myChart = null; // Declare the global variable
            GetGraphData();
            GetNewReading();
            GetNewPayment();
            GetRequestToday();
            GetRemit();

            $(document).on('click', '#show_ingsight', function () {
                $('#insightContainer').fadeToggle();
            })
            $(document).on('change', '#select_year', function () {
                var selectedYear = $(this).val(); // Get selected year from dropdown
                GetGraphData(); // Call chartDataSets with the selected year
            });

            function GetRemit() {
                $.ajax({
                    type: 'GET',
                    url: '/AdminDashboard/GetRemit',
                    success: function (response) {
                        console.log("remit:"+response);
                        var result = $('#remit').text(response);
                        //$('#table_payment').html(result);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetNewReading() {
                $.ajax({
                    url: '/AdminDashboard/GetNewReading',
                    type: 'GET',
                    success: function (response) {
                        //console.log(response);
                        var result = $(response).find('#table_reading').html();
                        var resultNumber = $(response).find('#number_address').html();
                        $('#table_reading').html(result);
                        $('#number_address').html(resultNumber);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetRequestToday() {
                $.ajax({
                    url: '/AdminDashboard/GetRequest',
                    type: 'GET',
                    success: function (response) {
                        //console.log(response);
                        var result = $(response).find('#number_request').html();
                        $('#number_request').html(result);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetRegistered() {
                $.ajax({
                    url: '/AdminDashboard/GetRequest',
                    type: 'GET',
                    success: function (response) {
                        console.log(response);
                        //var result = $(response).find('#number_request').html();
                        //$('#number_request').html(result);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetNewPayment() {
                $.ajax({
                    url: '/AdminDashboard/GetPayments',
                    type: 'GET',
                    success: function (response) {
                        //console.log(response);
                        var result = $(response).find('#table_payment').html();
                        $('#table_payment').html(result);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetGraphData() {
                var selectedYear = $('#select_year').val();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GraphWaterConsumption", "AdminDashboard")',
                    data: { year: selectedYear },
                    success: function (data) {
                        //console.log(data);
                        var yearDropdown = $('#select_year');
                        console.log($(yearDropdown).val());

                        var yearlyData = data.yearlyData || {};
                        var yearsData = {};
                        var insights = []; // To store all insights

                        Object.keys(yearlyData).forEach(function (year) {
                            var yearData = yearlyData[year];
                            yearsData[year] = {
                                actualData: yearData.actualData || [],
                                forecastData: yearData.movingAverage || [],
                                insights: yearData.insights || [],
                                percentChange: yearData.percentChange || []
                            };

                            //yearDropdown.append(new Option(year, year));
                            insights = insights.concat(yearData.insights || []);
                        });

                        console.log(yearsData);

                        var selectedYear = $('#select_year').val();
                        var yearData = yearsData[selectedYear]; // Get data for the selected year
                        var actualData = yearData.actualData[yearData.actualData.length - 1];
                        var avgData = yearData.forecastData[yearData.actualData.length - 1];

                        $('#current_data').text(actualData);
                        $('#average_data').text(avgData);
                        //console.log(`index=${yearData.forecastData.length - 1} ,average data= ${avgData}`);
                        //console.log(`index=${yearData.actualData.length - 1} ,actual data= ${actualData}`);

                        chartDataSets(yearsData); // Call chartDataSets with the initial year
                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function chartDataSets(yearlyData) {
                var selectedYear = $('#select_year').val();
                var yearData = yearlyData[selectedYear]; // Get data for the selected year

                if (!yearData) {
                    console.error(`No data available for year: ${selectedYear}`);
                    return;
                }

                var actualData = {
                    label: `Cubic Consumption ${selectedYear}`,
                    data: yearData.actualData,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    backgroundColor: 'rgba(0, 123, 255, 0.2)',
                    borderColor: '#052771'
                };

                var forecastData = {
                    label: `Forecast Data ${selectedYear}`,
                    data: yearData.forecastData,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    borderColor: 'red',//rgba(255, 99, 132, 1)
                    borderDash: [5, 5]
                };

                // Set the chart with the actual and forecast data
                SetChartJs(actualData, forecastData, yearData.insights);
                DisplayInsights(yearData.insights); // Call DisplayInsights with collected insights

            }

            function SetChartJs(actualData, forecastData, insights) {
                const ctx = $('#myChart');

                // Destroy the old chart if it exists
                if (myChart !== null) {
                    myChart.destroy(); // Properly destroy the previous chart
                }

                // Create a new chart
                myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [actualData, forecastData] // Pass both datasets (actual and forecast)
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Cubic Meter Consumption'
                                },
                                ticks: {
                                    font: {
                                        size: 14
                                    }
                                },
                                grid: {
                                    color: 'rgba(200, 200, 200, 0.2)', // Lighter gridlines
                                }
                            },
                            x: {
                                ticks: {
                                    font: {
                                        size: 14
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'Months'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    font: {
                                        size: 14,
                                        weight: 'bold'
                                    }
                                }
                            },
                            tooltip: {
                                enabled: true,
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleFont: { size: 14, weight: 'bold' },
                                bodyFont: { size: 12 },
                                bodyColor: '#ffffff',
                                titleColor: '#ffffff',
                                borderColor: '#ffffff',
                                borderWidth: 1,
                                callbacks: {
                                    // Tooltip content callback
                                    afterLabel: function (tooltipItem) {
                                        var index = tooltipItem.dataIndex;
                                        var label = tooltipItem.label;
                                        //console.log(tooltipItem);
                                        //console.log(label);

                                        var insight;
                                        if (tooltipItem.datasetIndex === 1) {
                                            insight = 'Expected cubic consumption for this month.';
                                        }
                                        //var insight = insights[index] || 'Expected cubic consumption for this month.';
                                        highlightInsight(index); // Highlight the corresponding insight
                                        return insight;
                                    }
                                }
                            }
                        },
                        // Event listeners for when the tooltip is hidden (e.g., when the user moves away)
                        onHover: function (event, chartElement) {
                            if (chartElement.length === 0) {
                                resetInsightHighlight(); // Reset highlight when no chart element is hovered
                            }
                        }
                    }
                });
            }

            // Function to highlight the relevant insight in the external container
            function highlightInsight(index) {
                var insightContainer = $('#insightContainer');

                // Remove existing highlights
                var highlightedItems = insightContainer.find('.highlight');
                if (highlightedItems.length) {
                    highlightedItems.removeClass('highlight');
                }

                // Find the div with the corresponding data-index attribute
                var insightItem = insightContainer.find(`[data-index="${index}"]`);

                // Add the highlight class to the matching element
                insightItem.addClass('highlight bg-dark text-white');

                //console.log(insightItem); // For debugging, shows the element being highlighted
            }

            // Function to reset the highlighted insight
            function resetInsightHighlight() {
                var insightContainer = $('#insightContainer');

                var highlightedItems = insightContainer.find('.highlight');
                if (highlightedItems.length) {
                    highlightedItems.removeClass('highlight bg-dark text-white');
                }
            }

            function DisplayInsights(insights) {

                //console.log("Insights Data:", insights); // Check if insights has data

                var insightContainer = $('#insightContainer');
                var tbody = $('.insight_table').find('tbody');

                tbody.empty(); // Clear any previous insights

                if (insights.length > 0) {
                    var insightText = '<tr>';

                    insights.forEach(function (insight, index) {
                        if (insight !== null) {
                            insightText += `<td class="p-2 rounded mb-3" data-index="${index}">${insight}</td>`;
                        }
                        else {
                            insightText += `<td class="p-2 rounded mb-3" data-index="${index}">No Insights for this month.</td>`;
                        }
                    });

                    insightText += "</tr>";
                    //console.log("Generated HTML Row:", insightText); // Check generated row HTML

                    tbody.append(insightText); // Append row to table body
                }
            }




            function getRandomColor() {
                var r = Math.floor(Math.random() * 156); // 0 to 155
                var g = Math.floor(Math.random() * 156);
                var b = Math.floor(Math.random() * 156);

                // Ensure at least one component is very dark
                var darkComponent = Math.floor(Math.random() * 3);
                switch (darkComponent) {
                    case 0: r = Math.floor(Math.random() * 50); break; // 0 to 49
                    case 1: g = Math.floor(Math.random() * 50); break;
                    case 2: b = Math.floor(Math.random() * 50); break;
                }

                // Convert to hex
                r = r.toString(16).padStart(2, '0');
                g = g.toString(16).padStart(2, '0');
                b = b.toString(16).padStart(2, '0');

                return "#" + r + g + b;
            }


        });


    </script>
    <script>
        $(document).ready(function () {
            var container = $("#calendars").simpleCalendar({
                displayEvent: true,
                displayYear: true,
                disableEventDetails: false
            });

            var calendar = container.data('plugin_simpleCalendar');

            function setWaterReadingEvents() {
                try {
                    const events = [];
                    const currentDate = new Date();

                    for (let i = 0; i < 12; i++) {
                        const year = currentDate.getFullYear() + Math.floor((currentDate.getMonth() + i) / 12);
                        //console.log(`current: ${currentDate.getFullYear()} AND math:${Math.floor((currentDate.getMonth() + i) / 12)}`);
                        const month = (currentDate.getMonth() + i) % 12;
                        //console.log(month);


                        for (let day = 3; day <= 24; day++) {
                            const eventDate = new Date(year, month, day);
                            if (day >= 3 && day <= 5) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> Phase 2 BLK 51 to 143 '
                                });
                            }
                            if (day >= 6 && day <= 8) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> Phase 1 BLK 41 to 48 '
                                });
                            }
                            if (day >= 19 && day <= 21) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> BLK 24 to 40 '
                                });
                            }
                            if (day >= 22 && day <= 24) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> BLK 7 to 23 '
                                });
                            }


                        }
                    }

                    for (let i = 0; i < 12; i++) {
                        const year = currentDate.getFullYear() + Math.floor((currentDate.getMonth() + i) / 12);
                       // console.log(`current: ${currentDate.getFullYear()} AND math:${Math.floor((currentDate.getMonth() + i) / 12)}`);
                        const month = (currentDate.getMonth() + i) % 12;
                       // console.log(month);


                        for (let day = 6; day <= 28; day++) {
                            const eventDate = new Date(year, month, day);
                            if (day >= 6 && day <= 9) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Billing <br/> Phase 2 BLK 51 to 143 '
                                });
                            }
                            if (day > 9 && day <= 12) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Billing <br/> Phase 1 BLK 41 to 48 '
                                });
                            }
                            if (day > 22 && day <= 25) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Billing <br/> BLK 24 to 40 '
                                });
                            }
                            if (day > 25 && day <= 28) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Billing <br/> BLK 7 to 23 '
                                });
                            }


                        }
                    }

                    //console.log("Events to be set:", events);

                    // Try setting events directly in the options
                    container.simpleCalendar({
                        events: events,
                        displayEvent: true,
                        disableEventDetails: false
                    });

                    // Also try the setEvents method
                    calendar.setEvents(events);
                } catch (error) {
                    console.error("Error in setWaterReadingEvents:", error);
                }
            }

            // Try setting events immediately and after a delay
            setWaterReadingEvents();
            setTimeout(setWaterReadingEvents, 500);
        });
    </script>

}

@section sidebar{
    <a href="/kvhai/staff/admin/dashboard" class="nav-link text-light mb-2 d-flex align-items-center active">
        <i class="bi bi-house-door me-2"></i> Dashboard
    </a>
    <a href="/kvhai/staff/admin/accounts" class="nav-link text-light mb-2 d-flex align-items-center ">
        <i class="bi bi-people me-2"></i> Accounts
    </a>
    <a href="/kvhai/staff/announcement" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="bi bi-file-earmark-text me-2"></i> Announcement
    </a>
    @*<a href="/kvhai/staff/request-page/" class="nav-link text-light mb-2 d-flex align-items-center">
            <i class="bi bi-person me-2"></i> Request
        </a>*@
    <a href="/kvhai/staff/resident-address/" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="bi bi-person me-2"></i> Resident Address
    </a>
    <a href="/kvhai/staff/admin/streets" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="bi bi-geo-alt me-2"></i>Streets
    </a>
    <a href="/kvhai/staff/water-reading" class="nav-link text-light mb-2 d-flex  align-items-center">
        <i class="bi bi-pencil-square me-2"></i> Reading

    </a>

}
@section mobilenav{
    <a href="/kvhai/staff/admin/dashboard" class="nav-link text-light mb-2 d-flex align-items-center active">
        <i class="bi bi-house-door me-2"></i> Dashboard
    </a>
    <a href="/kvhai/staff/admin/accounts" class="nav-link text-light mb-2 d-flex align-items-center ">
        <i class="bi bi-people me-2"></i> Accounts

    </a>
    <a href="/kvhai/staff/announcement" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="bi bi-file-earmark-text me-2"></i> Announcement
    </a>
    @*<a href="/kvhai/staff/request-page/" class="nav-link text-light mb-2 d-flex align-items-center">
            <i class="bi bi-person me-2"></i> Request
        </a>*@
    <a href="/kvhai/staff/resident-address/" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="bi bi-person me-2"></i> Resident Address
    </a>
    <a href="/kvhai/staff/admin/streets" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="bi bi-geo-alt me-2"></i>Streets

    </a>

    <a href="/kvhai/staff/water-reading" class="nav-link text-light mb-2 d-flex  align-items-center">
        <i class="bi bi-pencil-square me-2"></i> Reading

    </a>

}

<!--ROW 1-->
<div class="row g-4 mb-3">
    <!-- Water Consumption Card -->
    <div class="col-12 col-md-6">
        <div class="card metric-card shadow-sm ">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class=" text-muted mb-0">Monthly Water Consumption</h5>
                    <div class="metric-icon bg-primary bg-opacity-10">
                        <i class="bi bi-droplet-fill text-primary"></i>
                    </div>
                </div>
                <div class="card-value text-dark mb-2" id="current_data">0</div>
                <div class="text-muted small">
                    Average: <span class="text-success" id="average_data">0</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Number of Requests Card -->
    <div class="col-12 col-md-6">
        <div class="card metric-card shadow-sm ">
            <div class="card-body" id="number_request">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class=" text-muted mb-0">Daily Remit</h5>
                    <div class="metric-icon bg-success bg-opacity-10">
                        @*<i class="bi bi-chat-square-text-fill text-success"></i>*@
                        <i class="fa-solid fa-hand-holding-dollar text-success"></i>
                    </div>
                </div>
                <div class="card-value text-dark mb-2" id="remit">0</div>
            </div>
        </div>
    </div>

</div>

<!--row-cols-1 row-cols-sm-1 row-cols-xl-2 g-1 d-flex justify-content-evenly-->
<!--Row 2-->
<div class="row mb-3">
    <div class="col-12 ">
        <div class="container-fluid bg-white border border-2 p-2 rounded shadow-sm">
            <div class="row">
                <div class="col-9">
                    <h5 class="fw-bold text-muted p-2 mb-3 flex-grow-1">Water Consumption Analytics</h5>
                </div>
                <div class="col-3">
                    <select class="form-control text-center" id="select_year">
                        @{
                            foreach (var item in Model.YearList)
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="border border-1 mb-3"></div>
            <div class="chart-container" style="width: 95%; height:150px; margin: 20px auto;">
                <canvas id="myChart" class="backgroundgray rounded p-2"></canvas>

            </div>
            <!-- This div will display the insights -->
            <div class="border border-2 rounded shadow-sm mt-3 backgroundgray">
                <div class="d-flex flex-column border border-2 rounded bg-white" id="show_ingsight">
                    <h5 class="fw-bold text-muted">Insight</h5>
                    <i class="fa-solid fa-caret-down"></i>
                </div>

                <div class="border p-2 graph_insight bg-white table-responsive" id="insightContainer">
                    <table class="table insight_table">
                        <thead>
                            <tr>
                                <th scope="col">Jan</th>
                                <th scope="col">Feb</th>
                                <th scope="col">Mar</th>
                                <th scope="col">Apr</th>
                                <th scope="col">May</th>
                                <th scope="col">Jun</th>
                                <th scope="col">Jul</th>
                                <th scope="col">Aug</th>
                                <th scope="col">Sep</th>
                                <th scope="col">Oct</th>
                                <th scope="col">Nov</th>
                                <th scope="col">Dec</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>


</div>



<!--ROW 3-->
<!--ROW 3-->
<div class="row align-items-stretch">
    <div class="col-xl-7 d-flex flex-column">
        <!--register address-->


        <div class="container-fluid bg-white border border-2 p-2 rounded shadow-sm container_dashboard mb-3" style="height: 250px; overflow: hidden;">
            <div class="d-flex border-bottom border-2 p-2 mb-3">
                <div class="d-flex flex-grow-1">
                    <h6 class="fw-bold text-white p-2 bg-dark rounded text-decoration-underline">
                        @DateTime.Now.ToString("MMMM")
                    </h6>
                    &nbsp;&nbsp;
                    <h5 class="fw-bold text-muted "> Water Reading</h5>
                </div>
                <div class="d-flex align-items-center">
                    <div class="d-flex align-items-center">
                        <h6 class="fw-bold text-muted border rounded ms-3" style="
    background-color: #e2e8f0;
    color: white;
    padding: 5px 10px;
">
                            <a href="/kvhai/staff/water-reading/" class="text-decoration-none small">View All</a>
                        </h6>
                    </div>
                </div>
            </div>

            <div class="container-fluid container_data position-relative" style="max-height: 180px; overflow-y: auto;">
                <div class="table-responsive">
                    <table class="table table-borderless table-striped" id="table_reading">
                        <thead>
                            <tr>
                                <th scope="col">Address</th>
                                <th scope="col">Consumption</th>
                                <th scope="col">Time</th>
                                <th scope="col">Read By</th>
                            </tr>
                        </thead>
                        <tbody class="overflow-y-auto position-relative">
                            @{
                                if (Model.WaterReadingList != null)
                                {
                                    if (Model.WaterReadingList.Count > 0)
                                    {
                                        for (int i = 0; i < Model.WaterReadingList.Count; i++)
                                        {
                                            var employeeName = string.Join(", ",
                                                Model.EmployeeList[i].Lname,
                                                Model.EmployeeList[i].Fname,
                                                Model.EmployeeList[i].Mname);

                                            var address = string.Join(" ",
                                                "Blk " + Model.AddressList[i].Block,
                                                "Lot " + Model.AddressList[i].Lot,
                                                Model.AddressList[i].Street_Name) + " St.";

                                            var consumption = Model.WaterReadingList[i].Consumption;
                                            var date = DateTime.TryParse(Model.WaterReadingList[i].Date, out DateTime hour) ?
                                                hour.ToString("hh:mm tt") : "00:00";

                                            <tr data-address="@Model.WaterReadingList[i].Reading_ID">
                                                @*<td data-res="@Model.ResidentList[i].Res_ID">@name</td>*@
                                                <td data_addr="@Model.AddressList[i].Address_ID">@address</td>
                                                <td>@consumption</td>
                                                <td>@date</td>
                                                <td data-emp="@Model.EmployeeList[i].Emp_ID">@employeeName</td>
                                            </tr>

                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">No Data Found.</td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>


        <!--Recently Paid-->
        <div class="container-fluid bg-white border border-2 p-2 rounded shadow-sm container_dashboard" style="height: 300px; overflow: hidden;">
            <div class="d-flex border-bottom border-2 p-2 mb-3">
                <h5 class="fw-bold text-muted">Paid Today</h5>
            </div>

            <div class="container-fluid container_data" style="max-height: 220px; overflow-y: auto;">
                <div class="table-responsive">
                    <table class="table table-borderless table-striped" id="table_payment">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Address</th>
                                <th scope="col">Method</th>
                                <th scope="col">Status</th>
                                <th scope="col">Date</th>
                                <th scope="col">Occupancy</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.PaymentList != null && Model.PaymentList.Count > 0)
                            {
                                foreach (var item in Model.PaymentList)
                                {
                                    var occupancy = item.Is_Owner ? "Owner" : "Renter";
                                    <tr data-address="@item.Payment_ID">
                                        <td data-res="@item.Resident_ID">@item.Paid_By</td>
                                        <td>Blk @item.Block Lot @item.Lot @item.Street St. </td>
                                        <td>@item.Payment_Method</td>
                                        <td>@item.Payment_Status</td>
                                        <td>@item.Payment_Date</td>
                                        <td>@occupancy</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center">No Data Found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!--FOOTER-->
        </div>

    </div>

    <div class="col-xl-5">
        <div class="container-fluid bg-white border border-2 p-2 rounded shadow-sm w-100 h-100">
            <h5 class="fw-bold text-muted border-bottom border-2 p-2 mb-3">Task</h5>
            <div class="header-border"></div>
            <!--EVO CALENDAR-->
            <div id="calendars" style="height: calc(100% - 60px)"></div>
        </div>
    </div>
</div>

