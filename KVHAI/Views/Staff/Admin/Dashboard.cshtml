@{
    //Layout = "";
    ViewBag.Title = "Admin Dashboard";
}

@section head{
    <link href="/lib/evo-calendar/css/evo-calendar.css" rel="stylesheet" />
    <link href="/lib/evo-calendar/css/evo-calendar.midnight-blue.min.css" rel="stylesheet" />
    <link href="/lib/evo-calendar/css/evo-calendar.royal-navy.min.css" rel="stylesheet" />
    <style>
        .backgroundgray {
            background-color: #f1f5f9;
        }
       
        .chartjs-tooltip {
            background-color: rgba(0, 0, 0, 0.8) !important;
            color: #ffffff !important;
            border-radius: 5px !important;
            padding: 10px !important;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5) !important;
            font-size: 12px !important;
        }

        .graph_insight {
            display: none;
            font-family: Arial, sans-serif;
            color: #444;
            font-size: 0.9rem;
            background-color: #fafafa; /* Light grey background */
            padding: 20px;
            border-radius: 5px; /* Rounded corners */
        }

        /* Dropdown Button Styling */
        #show_ingsight {
            cursor:pointer;
        }

        #show_ingsight:hover {
            background-color: #f1f5f9; /* Darker blue on hover */
        }

        .highlight {
            background-color: red;
            border: 2px solid #007bff; /* Adding a border */
            padding: 12px;
            transform: scale(1.05);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
            transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease, border 0.3s ease;
        }

        .highlight td {
            border: 2px solid #007bff; /* Border for each cell in the highlighted row */
        }

        .chart-container {
            max-width: 1600px; /* or larger */
            margin-bottom: 30px; /* More space between chart and insights */
        }

        #insightContainer {
            padding: 15px;
        }

        .table.insight_table td:hover {
            background-color: #f9f9f9; /* Light hover background */
            cursor: pointer;
        }

        /* Insight table styling */
        .table.insight_table th,
        .table.insight_table td {
            text-align: center;
            vertical-align: middle;
            padding: 10px; /* Add more padding */
            font-size: 14px; /* Adjust font size for better readability */
        }

        .table.insight_table th {
            background-color: #f0f0f0; /* Light background for headers */
            color: #333; /* Darker text for better contrast */
            border: 1px solid #ddd; /* Subtle border for better separation */
        }

        .table.insight_table td {
            background-color: #ffffff; /* White background for table cells */
            border: 1px solid #ddd; /* Subtle border for better definition */
        }
        .p-2.rounded.mb-3 {
            margin-bottom: 10px; /* Add space between table rows */
            border-radius: 5px; /* Softer rounded corners for table cells */
        }


    </style>
}

@section Scripts{
    <script src="~/lib/chartjs/chart.umd.min.js"></script>
    <script src="~/lib/evo-calendar/js/evo-calendar.min.js"></script>

    <!--EVO CALENDAR SCRIPTS-->
    <script>
        myEvents = [
            {
                id: "blk41-143",
                name: "Reading",
                description: "lorem ipsum",
                date: "07/06/2024",
                type: "holiday",
                everyYear: true
            },
            // more events here
        ],
            $('#calendar').evoCalendar({
                'todayHighlight': true,
                'eventDisplayDefault': false,
                theme: 'Orange Coral',
                sidebarDisplayDefault: false,
                format: 'mm/dd/yyyy',
                badge: "Important",
                titleFormat: 'MM yyyy',
                eventHeaderFormat: 'MM d, yyyy',
                calendarEvents: myEvents
            });

        $(document).ready(function (e) {
            $('#calendar').evoCalendar({
                settingName: "task"
            })

            $('.day').on('click', () => {
                //const a = document.getElementsByClassName('');
                //a.classList.toggle('rotate');
                $(".evo-calendar").toggleClass("event-hide");
            });

            $(document).on('click', (e) => {
                if (!$(e.target).closest('.calendar-events').length && !$(e.target).closest('.evo-calendar').length) {
                    $(".evo-calendar").addClass("event-hide");
                }
            });
        })
    </script>

    <!--CHART JS SCRIPTS-->
    <script>
        $(document).ready(function () {
            var myChart = null; // Declare the global variable
            GetGraphData();
            GetNewRegister();

            $(document).on('change', '#select_year', function () {
                var selectedYear = $(this).val(); // Get selected year from dropdown
                GetGraphData(); // Call chartDataSets with the selected year
            });

            function GetNewRegister() {
                $.ajax({
                    url: '/AdminDashboard/GetRegisterAddress',
                    type: 'GET',
                    success: function (response) {
                        //console.log(response);
                        var result = $(response).find('#table_address').html();
                        $('#table_address').html(result);

                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetGraphData() {
                $.ajax({
                    url: '@Url.Action("GraphWaterConsumption", "AdminDashboard")',
                    type: 'GET',
                    success: function (data) {
                        console.log(data);
                        var yearDropdown = $('#select_year');
                        console.log($(yearDropdown).val());

                        var yearlyData = data.yearlyData || {};
                        var yearsData = {};
                        var insights = []; // To store all insights

                        Object.keys(yearlyData).forEach(function (year) {
                            var yearData = yearlyData[year];
                            yearsData[year] = {
                                actualData: yearData.actualData || [],
                                forecastData: yearData.movingAverage || [],
                                insights: yearData.insights || [],
                                percentChange: yearData.percentChange || []
                            };

                            //yearDropdown.append(new Option(year, year));
                            insights = insights.concat(yearData.insights || []);
                        });

                        chartDataSets(yearsData); // Call chartDataSets with the initial year
                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function chartDataSets(yearlyData) {
                var selectedYear = $('#select_year').val();
                var yearData = yearlyData[selectedYear]; // Get data for the selected year

                if (!yearData) {
                    console.error(`No data available for year: ${selectedYear}`);
                    return;
                }

                var actualData = {
                    label: `Cubic Consumption ${selectedYear}`,
                    data: yearData.actualData,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    backgroundColor: 'rgba(0, 123, 255, 0.2)',
                    borderColor: '#052771'
                };

                var forecastData = {
                    label: `Forecast Data ${selectedYear}`,
                    data: yearData.forecastData,
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    borderColor: 'red',//rgba(255, 99, 132, 1)
                    borderDash: [5, 5]
                };

                // Set the chart with the actual and forecast data
                SetChartJs(actualData, forecastData, yearData.insights);
                DisplayInsights(yearData.insights); // Call DisplayInsights with collected insights

            }

            function SetChartJs(actualData, forecastData, insights) {
                const ctx = $('#myChart');

                // Destroy the old chart if it exists
                if (myChart !== null) {
                    myChart.destroy(); // Properly destroy the previous chart
                }

                // Create a new chart
                myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [actualData, forecastData] // Pass both datasets (actual and forecast)
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Cubic Meter Consumption'
                                },
                                ticks: {
                                    font: {
                                        size: 14
                                    }
                                },
                                grid: {
                                    color: 'rgba(200, 200, 200, 0.2)', // Lighter gridlines
                                }
                            },
                            x: {
                                ticks: {
                                    font: {
                                        size: 14
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'Months'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    font: {
                                        size: 14,
                                        weight: 'bold'
                                    }
                                }
                            },
                            tooltip: {
                                enabled: true,
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleFont: { size: 14, weight: 'bold' },
                                bodyFont: { size: 12 },
                                bodyColor: '#ffffff',
                                titleColor: '#ffffff',
                                borderColor: '#ffffff',
                                borderWidth: 1,
                                callbacks: {
                                    // Tooltip content callback
                                    afterLabel: function (tooltipItem) {
                                        var index = tooltipItem.dataIndex;
                                        var label = tooltipItem.label;
                                        console.log(tooltipItem);
                                        console.log(label);

                                        var insight;
                                        if (tooltipItem.datasetIndex === 1) {
                                            insight = 'Expected cubic consumption for this month.';
                                        }
                                        //var insight = insights[index] || 'Expected cubic consumption for this month.';
                                        highlightInsight(index); // Highlight the corresponding insight
                                        return insight;
                                    }
                                }
                            }
                        },
                        // Event listeners for when the tooltip is hidden (e.g., when the user moves away)
                        onHover: function (event, chartElement) {
                            if (chartElement.length === 0) {
                                resetInsightHighlight(); // Reset highlight when no chart element is hovered
                            }
                        }
                    }
                });
            }

            // Function to highlight the relevant insight in the external container
            function highlightInsight(index) {
                var insightContainer = $('#insightContainer');

                // Remove existing highlights
                var highlightedItems = insightContainer.find('.highlight');
                if (highlightedItems.length) {
                    highlightedItems.removeClass('highlight');
                }

                // Find the div with the corresponding data-index attribute
                var insightItem = insightContainer.find(`[data-index="${index}"]`);

                // Add the highlight class to the matching element
                insightItem.addClass('highlight bg-dark text-white');

                console.log(insightItem); // For debugging, shows the element being highlighted
            }

            // Function to reset the highlighted insight
            function resetInsightHighlight() {
                var insightContainer = $('#insightContainer');

                var highlightedItems = insightContainer.find('.highlight');
                if (highlightedItems.length) {
                    highlightedItems.removeClass('highlight bg-dark text-white');
                }
            }

            function DisplayInsights(insights) {

                console.log("Insights Data:", insights); // Check if insights has data

                var insightContainer = $('#insightContainer');
                var tbody = $('.insight_table').find('tbody');

                tbody.empty(); // Clear any previous insights

                if (insights.length > 0) {
                    var insightText = '<tr>';

                    insights.forEach(function (insight, index) {
                        if (insight !== null) {
                            insightText += `<td class="p-2 rounded mb-3" data-index="${index}">${insight}</td>`;
                        }
                        else {
                            insightText += `<td class="p-2 rounded mb-3" data-index="${index}">No Insights for this month.</td>`;
                        }
                    });

                    insightText += "</tr>";
                    console.log("Generated HTML Row:", insightText); // Check generated row HTML

                    tbody.append(insightText); // Append row to table body
                } 
            }




            function getRandomColor() {
                var r = Math.floor(Math.random() * 156); // 0 to 155
                var g = Math.floor(Math.random() * 156);
                var b = Math.floor(Math.random() * 156);

                // Ensure at least one component is very dark
                var darkComponent = Math.floor(Math.random() * 3);
                switch (darkComponent) {
                    case 0: r = Math.floor(Math.random() * 50); break; // 0 to 49
                    case 1: g = Math.floor(Math.random() * 50); break;
                    case 2: b = Math.floor(Math.random() * 50); break;
                }

                // Convert to hex
                r = r.toString(16).padStart(2, '0');
                g = g.toString(16).padStart(2, '0');
                b = b.toString(16).padStart(2, '0');

                return "#" + r + g + b;
            }


        });


    </script>

    <script>
        $(document).ready(function () {
            $(document).on('click', '#show_ingsight', function () {
                $('#insightContainer').fadeToggle('fast');
            });
        });
    </script>

}

@section sidebar{
}
@section mobilenav{
}

<div class="card shadow-sm">
    <div class="card-body">
        <!--row-cols-1 row-cols-sm-1 row-cols-xl-2 g-1 d-flex justify-content-evenly-->
        <div class="row mb-3">
            <div class="col-12 ">
                <div class="container border border-2 p-2 rounded shadow-sm">
                    <div class="row">
                        <div class="col-9">
                            <h5 class="fw-bold text-muted p-2 mb-3 flex-grow-1">Water Consumption Analytics</h5>
                        </div>
                        <div class="col-3">
                            <select class="form-control text-center" id="select_year">
                                <option value="2024" selected>2024</option>
                                <option value="2025">2025</option>
                            </select>
                        </div>
                    </div>
                    <div class="border border-1 mb-3"></div>
                    <div class="chart-container" style="width: 95%; height:200px; margin: 20px auto;">
                        <canvas id="myChart" class="backgroundgray rounded p-2"></canvas>

                    </div>
                    <!-- This div will display the insights -->
                    <div class="border border-2 rounded shadow-sm mt-3 backgroundgray">
                        <div class="d-flex flex-column border border-2 rounded bg-white" id="show_ingsight">
                            <h5 class="fw-bold text-muted">Insight</h5>
                            <i class="fa-solid fa-caret-down"></i>
                        </div>

                        <div class="border p-2 graph_insight bg-white table-responsive" id="insightContainer">
                            <table class="table insight_table">
                                <thead>
                                    <tr>
                                        <th scope="col">Jan</th>
                                        <th scope="col">Feb</th>
                                        <th scope="col">Mar</th>
                                        <th scope="col">Apr</th>
                                        <th scope="col">May</th>
                                        <th scope="col">Jun</th>
                                        <th scope="col">Jul</th>
                                        <th scope="col">Aug</th>
                                        <th scope="col">Sep</th>
                                        <th scope="col">Oct</th>
                                        <th scope="col">Nov</th>
                                        <th scope="col">Dec</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Data will be populated here -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>

            
        </div>

        <!--ROW 2-->
        <div class="row">
            <div class="col-xl-5">
                <div class="container border border-2 p-2 rounded shadow-sm">
                    <div class="row">
                        <div class="col-12">
                            <h5 class="fw-bold text-muted border-bottom border-2 p-2 mb-3">Recent register address</h5>
                        </div>
                    </div>
                    <div class="container">
                        <div class="table-responsive">
                            <table class="table" id="table_address">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Block</th>
                                        <th scope="col">Lot</th>
                                        <th scope="col">Street</th>
                                        <th scope="col">Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ 
                                        if (Model.ResidentAddress != null)
                                        {
                                            if (Model.ResidentAddress.Count > 0)
                                            {
                                                foreach (var item in Model.ResidentAddress)
                                                {
                                                    <tr data-address="@item.Address_ID">
                                                        <td data-res="@item.Resident_ID">@item.Name</td>
                                                        <td>@item.Block</td>
                                                        <td>@item.Lot</td>
                                                        <td data-st="@item.Street_ID">@item.Street</td>
                                                        <td>@item.Register_At</td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="5">No Data Found.</td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-4">
                <div class="container border border-2 p-2 rounded shadow-sm">
                    <h5 class="fw-bold text-muted border-bottom border-2 p-2 mb-3">Task</h5>
                    <div class="header-border"></div>
                    <!--EVO CALENDAR-->
                    <div id="calendar"></div>
                </div>
            </div>
        </div>
    </div>
</div>

