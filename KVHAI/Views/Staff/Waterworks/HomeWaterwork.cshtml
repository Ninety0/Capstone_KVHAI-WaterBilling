@{
    ViewBag.Title = "Home";
}

@section head{
    <link href="/css/simple-calendar.css" rel="stylesheet" />
    <style>
        .home_wrapper {
            /*height: calc(100vh - 220px);*/
        }
        #tbl_reading {
            position: relative;
            height: 305px; /* Adjust the table height to fit dynamically */
            /*overflow-y: auto;*/ /* Enable scrolling for overflow content */
        }
    </style>
}


@section sidebar{
    <a href="/kvhai/staff/waterwork/home" class="nav-link text-light mb-2 d-flex align-items-center active">
        <i class="bi bi-house-door me-2"></i> Home
    </a>
    <a href="/kvhai/staff/waterwork/reading" class="nav-link text-light mb-2 d-flex align-items-center ">
        <i class="bi bi-pencil-square me-2"></i> Reading
    </a>

}
@section mobilenav{
    <a href="/kvhai/staff/waterwork/home" class="nav-link text-light mb-2 d-flex align-items-center active">
        <i class="bi bi-house-door me-2"></i> Home
    </a>
    
    <a href="/kvhai/staff/waterwork/reading" class="nav-link text-light mb-2 d-flex align-items-center ">
        <i class="bi bi-pencil-square me-2"></i> Reading
    </a>
}
<div class="container-fluid home_wrapper">
    <div class="row" >
        <div class="col-md-6 mb-3 mb-md-0" >
            <div class="card shadow-sm h-100">
                <div class="card-body" >
                    <div id="calendars"></div>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-3 mb-md-0" >
            <div class="card shadow-sm h-100">
                <div class="card-body" >
                    <div class="row mb-3">
                        <div class="col">
                            <label for="location" class="form-label fw-bold text-small text-muted">Location</label>
                            <select id="location" class="form-select" aria-label="Default select example">
                                <option selected value="1">Phase 2 (Blk 51 to 143)</option>
                                <option value="2">Phase 1 (Blk 41 to 48)</option>
                                <option value="3">Blk 24 to 40</option>
                                <option value="4">Blk 7 to 23</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="select_status" class="form-label fw-bold text-small text-muted">Status</label>
                            <select id="select_status" class="form-select" aria-label="Default select example">
                                <option selected value="all">All</option>
                                <option value="complete">Complete</option>
                                <option value="pending">Pending</option>
                            </select>
                        </div>
                    </div>

                    <!--TABLE READING-->
                    <div class="container-fluid" id="table_data">
                        <div class="table-responsive" id="tbl_reading">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Address</th>
                                        <th scope="col">Consumption</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.AddressList != null && Model.AddressList.Count > 0)
                                    {
                                        for (int i = 0; i < Model.AddressList.Count; i++)
                                        {
                                            var index = i + 1;
                                            var address = $@"
                                                        Blk {Model.AddressList[i].Block} 
                                                        Lot {Model.AddressList[i].Lot} 
                                                        {Model.AddressList[i].Street_Name} St.";
                                            <tr>
                                                <th scope="row">@index</th>
                                                <td>@address</td>
                                                <td>@Model.WaterReadingList[i].Consumption</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr class="text-center">
                                            <td colspan="3">No Data Found.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="container-fluid mt-3 text-muted">
                            @{
                                var numberReading = string.IsNullOrEmpty(Model.ReadingCountByLocation)? "0": Model.ReadingCountByLocation;
                                var numberAddress = string.IsNullOrEmpty(Model.AddressCountByLocation) ? "0" : Model.AddressCountByLocation;
                            }
                            @numberReading out of @numberAddress
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



</div>

@section scripts{
    @*<script src="~/js/signalr/dist/browser/signalr.min.js"></script>*@
    <script src="~/js/water-reading.js" defer></script>
    <script src="~/js/jquery.simple-calendar.min.js"></script>
    <script>
        $(document).ready(function () {
            //CODE FOR SIGNALR
            const readingConnection = setupSignalRConnection("/kvhai/staff/reading", "WaterWorks Hub");

            readingConnection.on("ReceivedWaterReading", function () {
                GetWaterReadingByMonth();
            });
            //END SIGNAL R

            var container = $("#calendars").simpleCalendar({
                displayEvent: true,
                displayYear: true,
                disableEventDetails: false
            });

            var calendar = container.data('plugin_simpleCalendar');

            function setWaterReadingEvents() {
                try {
                    const events = [];
                    const currentDate = new Date();

                    for (let i = 0; i < 12; i++) {
                        const year = currentDate.getFullYear() + Math.floor((currentDate.getMonth() + i) / 12);
                        //console.log(`current: ${currentDate.getFullYear()} AND math:${Math.floor((currentDate.getMonth() + i) / 12)}`);
                        const month = (currentDate.getMonth() + i) % 12;
                        /*console.log(month);*/


                        for (let day = 3; day <= 24; day++) {
                            const eventDate = new Date(year, month, day);
                            if (day >= 3 && day <= 5) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> Phase 2 BLK 51 to 143 '
                                });
                            }
                            if (day >= 6 && day <= 8) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> Phase 1 BLK 41 to 48 '
                                });
                            }
                            if (day >= 19 && day <= 21) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> BLK 24 to 40 '
                                });
                            }
                            if (day >= 22 && day <= 24) {
                                events.push({
                                    // Format 1: ISO String
                                    startDate: eventDate.toISOString(),
                                    // Format 2: If above doesn't work, try this
                                    // startDate: eventDate.getTime(),
                                    // Format 3: Or try this
                                    // startDate: `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`,
                                    endDate: eventDate.toISOString(), // Some plugins require an endDate
                                    summary: 'Water Reading <br/> BLK 7 to 23 '
                                });
                            }


                        }
                    }

                    //console.log("Events to be set:", events);

                    // Try setting events directly in the options
                    container.simpleCalendar({
                        events: events,
                        displayEvent: true,
                        disableEventDetails: false
                    });

                    // Also try the setEvents method
                    calendar.setEvents(events);
                } catch (error) {
                    console.error("Error in setWaterReadingEvents:", error);
                }
            }

            // Try setting events immediately and after a delay
            setWaterReadingEvents();
            setTimeout(setWaterReadingEvents, 500);
            GetWaterReadingByMonth();

            $(document).on('change', '#select_status', function () {
                GetWaterReadingByMonth();
            })

            $(document).on('change', '#location', function () {
                GetWaterReadingByMonth();
            })

            function GetWaterReadingByMonth() {
                var _status = $('#select_status').val();
                var _location = $('#location').val();
                console.log(_status);
                $.ajax({
                    type: 'GET',
                    url: '/WaterWorks/GetConsumptionByMonth',
                    data: { status: _status, location: _location},
                    success: function (response) {
                        var result = $(response).find('#table_data').html();
                        $('#table_data').html(result);
                    },
                    error: function (xhr) {
                        toastr.error(xhr.responseText);
                    }
                });
            }
        });
    </script>
    <script>
        //$(document).ready(function () {
        //    const connection = new signalR.HubConnectionBuilder()
        //        .withUrl("/resident/water-consumption")
        //        .withAutomaticReconnect([0, 2000, 10000, 30000]) // Retry after 0s, 2s, 10s, and 30s
        //        .build();

        //    connection.start().then(function () {
        //        toastr.info("Connected to water-consumption hub");
        //    }).catch(function (err) {
        //        return console.error(err.toString());
        //    });

        //    // Optional: Log reconnection attempts
        //    connection.onreconnecting((error) => {
        //        toastr.warning('Reconnecting to water-consumption hub...');
        //        console.log('Reconnecting...', error);
        //    });

        //    connection.onreconnected(() => {
        //        toastr.success('Reconnected to water-consumption hub');
        //    });

        //    connection.onclose((error) => {
        //        toastr.error('Disconnected from water-consumption hub. Will retry connection...');
        //        console.log('Connection closed', error);
        //    });

        //});
    </script>

}