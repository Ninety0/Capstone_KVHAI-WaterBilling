@{
    ViewBag.Title = "Water Reading";
}

@section sidebar{
    <a href="/kvhai/staff/clerkhome/" class="nav-link text-light mb-2 d-flex align-items-center ">
        <i class="bi bi-house-door me-2"></i> Dashboard
    </a>
    <a href="/kvhai/staff/water-reading/" class="nav-link text-light mb-2 d-flex align-items-center active">
        <i class="bi bi-file-earmark-text me-2"></i> Reading
    </a>
    <a href="/kvhai/staff/water-billing/" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="fa-solid fa-file-pen me-2"></i> Billing

    </a>
    
}
@section mobilenav{
    <a href="/kvhai/staff/clerkhome/" class="nav-link text-light mb-2 d-flex align-items-center ">
        <i class="bi bi-house-door me-2"></i> Dashboard
    </a>
    <a href="/kvhai/staff/water-reading/" class="nav-link text-light mb-2 d-flex align-items-center active">
        <i class="bi bi-file-earmark-text me-2"></i> Reading
    </a>
    <a href="/kvhai/staff/water-billing/" class="nav-link text-light mb-2 d-flex align-items-center">
        <i class="fa-solid fa-file-pen me-2"></i> Billing
    </a>

}



<div class="card shadow-sm">
    <div class="card-body" id="waterReadingView">
        <div class="row">
            <div class="col">
                <div class="d-flex flex-column align-items-start">
                    <h5 class="fw-bold text-muted">KVHAI WATERWORKS</h5>
                    <h5 class="fw-bold text-muted">PERIOD COVER DATE</h5>
                </div>
            </div>
            <div class="col d-flex justify-content-end ">
                @{
                    @Model.GenerateSelect
                }
            </div>
        </div>
        <div class="container-fluid border shadow-lg rounded" id="tableView">
            <div class="row">
                <div class="col-12 col-lg-6 d-flex">
                    <select id="location" class="form-select w-75 mt-3 mb-lg-3 flex-grow-1 flex-lg-grow-0" aria-label="Default select example">
                        <option selected value="1">Phase 2 (Blk 51 to  143)</option>
                        <option value="2">Phase 1 (Blk 41 to  48)</option>
                        <option value="3">Blk 24 to 40</option>
                        <option value="4">Blk 7 to 23</option>
                        <option value="">All</option>
                    </select>
                </div>
                <div class="col-12 col-lg-6 d-flex justify-content-end">
                    <div class="me-3">
                        <button type="button" class="btn btn-success p-2" id="printButton">
                            <i class="bi bi-printer"></i> Print
                        </button>
                    </div>
                    <div class="" id="btngenerate_container">
                        @{
                            if (Model.GenerateButton != null)
                            {
                                @Model.GenerateButton
                            }
                        }

                    </div>
                </div>
                
            </div>

            <div class="table-responsive ">
                <table class="table" id="tableData">
                    <thead>
                        <tr>
                            <th scope="col">Reference No.</th>
                            <th scope="col">Blk</th>
                            <th scope="col">Lot</th>
                            <th scope="col">Name</th>
                            <th scope="col">
                                <div id="lblDate" class="text-center" data-date="@Model.MonthlyBillText-@Model.WRPrevFirstDate">@Model.WRPrevFirstDate @Model.WRPrevMonth @Model.WRPrevLastDate</div>
                                <div>Previous Reading</div>
                            </th>
                            <th scope="col">
                                <div class="text-center">@Model.WRCurrentFirstDate @Model.WRCurrentMonth @Model.WRCurrentLastDate</div>
                                <div>Current Reading</div>
                            </th>
                            <th class="text-center" scope="col">
                                <div>Cubic Meter</div>
                                <div class="text-center">M3</div>
                            </th>
                            <th class="text-center" scope="col">
                                <div class="text-center">@Model.MonthlyBillText @Model.WRPrevLastDate</div>
                                <div>Amount</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @{
                            try
                            {
                                if (Model.ResidentAddress.Count < 1)
                                {
                                    <tr>
                                        <td colspan="8" class="p-5 text-center fw-bold">NO DATA FOUND</td>
                                    </tr>
                                }
                                for (int i = 0; i < Model.ResidentAddress.Count; i++)
                                {
                                    // Define default values for cases where data might be missing
                                    string previousReading = "N/A";
                                    string currentReading = "N/A";
                                    string cubicMeter = "N/A";
                                    string billAmount = "N/A";
                                    string arrears = "N/A";

                                    // Fetch the previous reading if available
                                    if (i < Model.PreviousReading.Count)
                                    {
                                        previousReading = Model.PreviousReading[i]?.Consumption ?? "N/A";
                                    }

                                    // Fetch the current reading if available
                                    if (i < Model.CurrentReading.Count)
                                    {
                                        currentReading = Model.CurrentReading[i]?.Consumption ?? "N/A";
                                    }

                                    // Fetch the calculated cubic meter if available
                                    if (i < Model.CubicMeter.Count)
                                    {
                                        cubicMeter = Model.CubicMeter[i].ToString();
                                    }

                                    // Fetch the calculated bill amount if available
                                    if (i < Model.BillAmount.Count)
                                    {
                                        billAmount = Model.BillAmount[i].ToString("F2");
                                    }

                                    // Fetch the arrears if available
                                    //if (i < Model.Arrears.Count)
                                    //{
                                    //    arrears = Model.Arrears[i].ToString("F2");
                                    //}

                                    <tr class="rowData">
                                        <td class="border border-secondary-subtle readingID" data-reading="@Model.PreviousReading[i].Address_ID">@(i + 1) @Model.PreviousReading[i].Address_ID</td>
                                        <td class="border border-secondary-subtle">@Model.ResidentAddress[i].Block</td>
                                        <td class="border border-secondary-subtle">@Model.ResidentAddress[i].Lot</td>
                                        <td class="border border-secondary-subtle">@Model.ResidentAddress[i].Name</td>
                                        <td class="previous-reading text-center border border-secondary-subtle" data-prev="@Model.WaterBillingValues[i].PreviousReading">@Model.WaterBillingValues[i].PreviousReading</td>
                                        <td class="current-reading text-center border border-secondary-subtle" data-current="@Model.WaterBillingValues[i].CurrentReading">@Model.WaterBillingValues[i].CurrentReading</td>
                                        <td class="text-center border border-secondary-subtle" data-cubic="@Model.WaterBillingValues[i].CubicMeter">@Model.WaterBillingValues[i].CubicMeter</td>
                                        <td class="border border-secondary-subtle" data-bill="@Model.WaterBillingValues[i].Total">@Model.WaterBillingValues[i].Total</td>
                                        @*<td>@arrears</td>*@
                                    </tr>

                                }
                            }
                            catch (Exception ex)
                            {
                                <tr>
                                    <td colspan="9">@ex.Message</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>


    </div>
</div>
<div class="content-container p-3" >
</div>

@section scripts{
    <script defer>
        $(document).ready(function () {

            //CODE FOR SIGNALR
            const readingConnection = setupSignalRConnection("/kvhai/staff/reading", "Reading Hub");

            readingConnection.on("ReceivedWaterReading", function () {
                updateReadingTable();
                toastr.info("New water reading.");
            });
            //END SIGNAL R
            
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //EVENT LISTENERS
            $(document).on('change', '#location', GetWaterReadingByLocation);

            $(document).on('click', '#btnGenerate', InsertWaterBill);

            $(document).on('change', '#waterReadingSelect', GetWaterReadingByDateRange);
            $('#dateCoverage').text("PERIOD COVER DATE " + $('#waterReadingSelect').val());

            $(document).on('click', '#printButton', function (e) {
                e.preventDefault(); // Prevent default link behavior

                // Clone the table
                const clonedTable = $('#tableData').clone();

                // Add inline styles to the cloned table
                clonedTable.css({
                    "border-collapse": "collapse",
                    "width": "100%"
                });
                clonedTable.find('th, td').css({
                    "border": "1px solid #ddd",
                    "padding": "8px",
                    "text-align": "left"
                });
                clonedTable.find('th').css({
                    "background-color": "#f2f2f2"
                });

                var waterSelectText = $('#waterReadingSelect').val();

                var firstMonth = waterSelectText.split("-")[0];
                var secondMonth = waterSelectText.split("-")[1];



                // Create the header element
                const headerElement = $('<div>', {
                    html: `<h3>KVHAI WATERWORKS</h3>  
                            <div>
                            <span style="font-weight: bold;
                                    font-size: 20px;">PERIOD COVER DATE</span>
                            <span style="font-weight: bold;
                                    font-size: 20px;"> ${firstMonth.substr(0, 3)} ${new Date().getFullYear()}  - 
                                    ${secondMonth.substr(0, 3)} ${new Date().getFullYear()}</span>
                            </div>
                            `,
                    css: {
                        'font-family': 'Arial, sans-serif',
                        'margin-bottom': '20px'
                    }
                });

                // Create the date filter element
                const dateFilterElement = $('<div>', {
                    html: `
    <p style="margin-top: 16px; font-family: Arial, sans-serif;">
        <strong>From:</strong> <span id="fromDate">${$('#startDate').val() || ''}</span>
        <br/>
        <strong>To:</strong> <span id="toDate">${$('#endDate').val() || ''}</span>
    </p>
`,
                    css: {
                        'text-align': 'left',
                        'font-family': 'Arial, sans-serif',
                        'margin-top': '20px'
                    }
                });

                // Combine the header, table, and date filter
                const styledContent = $('<div>')
                    .append(headerElement)
                    //.append(dateFilterElement)
                    .append(clonedTable);

                // Create a print window and inject the styled content
                const printWindow = window.open('', '_blank', 'width=800,height=600');
                printWindow.document.open();
                printWindow.document.write(styledContent.html());

                // Close the document and trigger the print dialog
                printWindow.document.close();
                printWindow.print();
            });

            //FUNCTIONS
            function updateReadingTable() {
                var array = {
                    location: ""
                };
                $.ajax({
                    url: "/Clerk/WaterReadLocation", // Your endpoint to fetch the updated list
                    type: "GET",
                    data: array,
                    success: function (response) {
                        console.log(response);
                        var result = $(response);
                        $('#tableData').html(result.find("#tableData").html());
                        $('#waterReadingSelect').html(result.find("#waterReadingSelect").html());
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching updated data:", error);
                    }
                });
            }

            function updateNotification() {
                $.ajax({
                    url: "/Clerk/WaterReadLocation", // Your endpoint to fetch the updated list
                    type: "GET",
                    success: function (response) {
                        var result = $(response).find("#tableData").html();
                        $('#tableData').html(result);
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching updated data:", error);
                    }
                });
            }

            //var reading = Html.Raw(Json.Serialize(Model.PreviousReading.Count));
            //populatePrevReadings(reading);
            //populateCurrentReadings();

            function GetWaterReadingByLocation() {
                var _location = $('#location').val();

                var select = $('#waterReadingSelect').find('option:selected');
                var dateFrom = select.data('datefrom').trim();
                var dateTo = select.data('dateto').trim();

                //alert(dateFrom+" To "+dateTo);

                var formData = {
                    location: _location,
                    fromDate: dateFrom,
                    toDate: dateTo
                };

                $.ajax({
                    type: 'GET',
                    url: '/Clerk/WaterReadLocation',
                    data: formData,
                    success: function (response) {

                        var btnContent = $(response).find('#btngenerate_container').html();
                        $('#btngenerate_container').html(btnContent);

                        console.log(btnContent);
                        var result = $(response).find('#tableData').html();
                        $('#tableData').html(result);
                        console.log(result);


                        //reading = Html.Raw(Json.Serialize(Model.PreviousReading.Count));
                        //populatePrevReadings(reading);
                        //populateCurrentReadings();
                    },
                    error: function (xhr, status, err_m) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function InsertWaterBill() {
                var _date = $('#lblDate').data('date')
                var dateFrom = $('#waterReadingSelect option:selected').data('datefrom');
                var location = $('#location').val();
                var rowData = $('.rowData')
                var billingData = [];

                rowData.each(function () {
                    var addressID= parseInt($(this).find('[data-reading]').data("reading"),10);
                    var _amount = $(this).find('[data-bill]').data("bill");
                    var _cubic = $(this).find('[data-cubic]').data("cubic");
                    var previous = $(this).find('[data-prev]').data("prev");
                    var current = $(this).find('[data-current]').data("current");

                    billingData.push({
                        Address_ID: addressID,
                        Previous_Reading: previous,
                        Current_Reading: current,
                        Cubic_Meter: _cubic,
                        Amount: _amount,
                        Bill_For: dateFrom,
                        Location: location
                        //date: _date
                    });
                });
                var formData = {
                    waterBilling: billingData,
                };

                $.ajax({
                    type: 'POST',
                    url: '/Clerk/CreateWaterBilling',
                    data: formData,
                    success: function (result) {
                        console.log(result);
                        toastr.success(result);
                    },
                    error: function (xhr, status, err_m) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

            function GetWaterReadingByDateRange() {
                var select = $('#waterReadingSelect').find('option:selected');
                var dateFrom = select.data('datefrom').trim();
                var dateTo = select.data('dateto').trim();
                //var _location = $('#location').val();

                var data = {
                    fromDate : dateFrom,
                    toDate: dateTo,
                    //location : _location
                };

                console.log(data);
                $.ajax({
                    type: 'GET',
                    url: '/Clerk/WaterReadingByMonth',
                    data: data,
                    success: function (response) {
                        //var result = $(response).find('#tableData').html();
                        //$('#tableData').html(result);

                        //var btnContent = $(response).find('#btnGenerate').html();
                        //$('#btnGenerate').html(btnContent);
                        console.log(response);
                        var res = $(response).find('#tableView').html();
                        $('#tableView').html(res);

                        $('#dateCoverage').text("PERIOD COVER DATE " + $('#waterReadingSelect').val());
                    },
                    error: function (xhr, status, err_m) {
                        toastr.error(xhr.responseText);
                    }
                });
            }

        });
    </script>
}